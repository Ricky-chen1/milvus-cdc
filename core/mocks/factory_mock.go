// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	msgstream "github.com/milvus-io/milvus/pkg/mq/msgstream"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// NewMsgStream provides a mock function with given fields: ctx
func (_m *Factory) NewMsgStream(ctx context.Context) (msgstream.MsgStream, error) {
	ret := _m.Called(ctx)

	var r0 msgstream.MsgStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (msgstream.MsgStream, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) msgstream.MsgStream); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(msgstream.MsgStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Factory_NewMsgStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMsgStream'
type Factory_NewMsgStream_Call struct {
	*mock.Call
}

// NewMsgStream is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) NewMsgStream(ctx interface{}) *Factory_NewMsgStream_Call {
	return &Factory_NewMsgStream_Call{Call: _e.mock.On("NewMsgStream", ctx)}
}

func (_c *Factory_NewMsgStream_Call) Run(run func(ctx context.Context)) *Factory_NewMsgStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_NewMsgStream_Call) Return(_a0 msgstream.MsgStream, _a1 error) *Factory_NewMsgStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Factory_NewMsgStream_Call) RunAndReturn(run func(context.Context) (msgstream.MsgStream, error)) *Factory_NewMsgStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMsgStreamDisposer provides a mock function with given fields: ctx
func (_m *Factory) NewMsgStreamDisposer(ctx context.Context) func([]string, string) error {
	ret := _m.Called(ctx)

	var r0 func([]string, string) error
	if rf, ok := ret.Get(0).(func(context.Context) func([]string, string) error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func([]string, string) error)
		}
	}

	return r0
}

// Factory_NewMsgStreamDisposer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMsgStreamDisposer'
type Factory_NewMsgStreamDisposer_Call struct {
	*mock.Call
}

// NewMsgStreamDisposer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) NewMsgStreamDisposer(ctx interface{}) *Factory_NewMsgStreamDisposer_Call {
	return &Factory_NewMsgStreamDisposer_Call{Call: _e.mock.On("NewMsgStreamDisposer", ctx)}
}

func (_c *Factory_NewMsgStreamDisposer_Call) Run(run func(ctx context.Context)) *Factory_NewMsgStreamDisposer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_NewMsgStreamDisposer_Call) Return(_a0 func([]string, string) error) *Factory_NewMsgStreamDisposer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_NewMsgStreamDisposer_Call) RunAndReturn(run func(context.Context) func([]string, string) error) *Factory_NewMsgStreamDisposer_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryMsgStream provides a mock function with given fields: ctx
func (_m *Factory) NewQueryMsgStream(ctx context.Context) (msgstream.MsgStream, error) {
	ret := _m.Called(ctx)

	var r0 msgstream.MsgStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (msgstream.MsgStream, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) msgstream.MsgStream); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(msgstream.MsgStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Factory_NewQueryMsgStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewQueryMsgStream'
type Factory_NewQueryMsgStream_Call struct {
	*mock.Call
}

// NewQueryMsgStream is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) NewQueryMsgStream(ctx interface{}) *Factory_NewQueryMsgStream_Call {
	return &Factory_NewQueryMsgStream_Call{Call: _e.mock.On("NewQueryMsgStream", ctx)}
}

func (_c *Factory_NewQueryMsgStream_Call) Run(run func(ctx context.Context)) *Factory_NewQueryMsgStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_NewQueryMsgStream_Call) Return(_a0 msgstream.MsgStream, _a1 error) *Factory_NewQueryMsgStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Factory_NewQueryMsgStream_Call) RunAndReturn(run func(context.Context) (msgstream.MsgStream, error)) *Factory_NewQueryMsgStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewTtMsgStream provides a mock function with given fields: ctx
func (_m *Factory) NewTtMsgStream(ctx context.Context) (msgstream.MsgStream, error) {
	ret := _m.Called(ctx)

	var r0 msgstream.MsgStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (msgstream.MsgStream, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) msgstream.MsgStream); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(msgstream.MsgStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Factory_NewTtMsgStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTtMsgStream'
type Factory_NewTtMsgStream_Call struct {
	*mock.Call
}

// NewTtMsgStream is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) NewTtMsgStream(ctx interface{}) *Factory_NewTtMsgStream_Call {
	return &Factory_NewTtMsgStream_Call{Call: _e.mock.On("NewTtMsgStream", ctx)}
}

func (_c *Factory_NewTtMsgStream_Call) Run(run func(ctx context.Context)) *Factory_NewTtMsgStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_NewTtMsgStream_Call) Return(_a0 msgstream.MsgStream, _a1 error) *Factory_NewTtMsgStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Factory_NewTtMsgStream_Call) RunAndReturn(run func(context.Context) (msgstream.MsgStream, error)) *Factory_NewTtMsgStream_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFactory(t mockConstructorTestingTNewFactory) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
