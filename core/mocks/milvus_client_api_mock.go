// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/milvus-io/milvus-sdk-go/v2/client"
	entity "github.com/milvus-io/milvus-sdk-go/v2/entity"
	mock "github.com/stretchr/testify/mock"
	"github.com/zilliztech/milvus-cdc/core/util"
)

// MilvusClientApi is an autogenerated mock type for the MilvusClientApi type
type MilvusClientApi struct {
	util.CDCMark
	mock.Mock
}

// CreateCollection provides a mock function with given fields: ctx, schema, shardsNum, opts
func (_m *MilvusClientApi) CreateCollection(ctx context.Context, schema *entity.Schema, shardsNum int32, opts ...client.CreateCollectionOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, schema, shardsNum)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Schema, int32, ...client.CreateCollectionOption) error); ok {
		r0 = rf(ctx, schema, shardsNum, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePartition provides a mock function with given fields: ctx, collName, partitionName
func (_m *MilvusClientApi) CreatePartition(ctx context.Context, collName string, partitionName string) error {
	ret := _m.Called(ctx, collName, partitionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, collName, partitionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByPks provides a mock function with given fields: ctx, collName, partitionName, ids
func (_m *MilvusClientApi) DeleteByPks(ctx context.Context, collName string, partitionName string, ids entity.Column) error {
	ret := _m.Called(ctx, collName, partitionName, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entity.Column) error); ok {
		r0 = rf(ctx, collName, partitionName, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropCollection provides a mock function with given fields: ctx, collName
func (_m *MilvusClientApi) DropCollection(ctx context.Context, collName string) error {
	ret := _m.Called(ctx, collName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, collName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropPartition provides a mock function with given fields: ctx, collName, partitionName
func (_m *MilvusClientApi) DropPartition(ctx context.Context, collName string, partitionName string) error {
	ret := _m.Called(ctx, collName, partitionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, collName, partitionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, collName, partitionName, columns
func (_m *MilvusClientApi) Insert(ctx context.Context, collName string, partitionName string, columns ...entity.Column) (entity.Column, error) {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collName, partitionName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 entity.Column
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...entity.Column) (entity.Column, error)); ok {
		return rf(ctx, collName, partitionName, columns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...entity.Column) entity.Column); ok {
		r0 = rf(ctx, collName, partitionName, columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Column)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...entity.Column) error); ok {
		r1 = rf(ctx, collName, partitionName, columns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMilvusClientApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewMilvusClientApi creates a new instance of MilvusClientApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMilvusClientApi(t mockConstructorTestingTNewMilvusClientApi) *MilvusClientApi {
	mock := &MilvusClientApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
